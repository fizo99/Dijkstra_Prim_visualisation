{"version":3,"sources":["visualiser/components/wrappers/Interactions.jsx","visualiser/components/wrappers/AlgorithmsButtons.jsx","visualiser/components/wrappers/Menu.jsx","visualiser/components/wrappers/Clickable.jsx","visualiser/components/Cell.jsx","visualiser/components/Grid.jsx","visualiser/components/Legend.jsx","visualiser/components/Footer.jsx","visualiser/components/Button.jsx","visualiser/components/SelectField.jsx","visualiser/algorithms/dijkstra.js","visualiser/algorithms/astar.js","visualiser/algorithms/DFSmaze.js","visualiser/App.jsx","visualiser/utils.js","index.js"],"names":["Interactions","props","className","children","AlgorithmsButtons","Menu","Clickable","Cell","col","row","isFinish","isStart","isWall","isPath","isVisited","clickHandler","cName","onClick","id","Grid","mouseEvents","options","onMouseDown","isDrawingWalls","mouseDown","onMouseUp","mouseUp","onMouseMove","isMouseClicked","mouseDrag","grid","map","rowId","key","cell","cellId","isChangingStart","changeStart","isChangingEnd","changeEnd","Legend","React","Component","Footer","href","Button","handleClick","text","SelectField","onChange","handleAnimationSpeed","defaultValue","hidden","disabled","value","option","optionID","dijkstra","startCell","finishCell","visitedCellsInOrder","distance","unVisitedCells","getCells","length","sort","nodeA","nodeB","closestCell","shift","Infinity","push","updateUnvisitedNeighbors","unvisitedNeighbors","getNeighbors","filter","neighbor","previousCell","numCol","numRow","neighbors","listOfCells","i","j","astar","openSet","closedSet","visitedInOrder","lowestIndex","f","current","removeFromArray","includes","tempG","g","h","heuristic","a","b","Math","abs","arr","element","splice","recursion","r","c","order","randDirs","generateRandomDirections","dirs","shuffle","floor","random","randomInt","min","max","ceil","App","makeCell","state","startCellCoords","endCellCoords","makeGrid","curCol","resetGrid","isAnimationInProccess","setState","genMaze","DFSmaze","solve","algorithm","endCell","animateVisited","then","data","ms","Promise","res","setTimeout","newGrid","animatePath","animationSpeed","resolve","reject","document","getElementById","temp","path","animationSpeedHandler","e","target","changeStartBtnHandler","changeEndBtnHandler","drawingWallsBtnHandler","mouseDownHandler","tempGrid","mouseUpHandler","changeEndCell","cellCoords","split","parseInt","changeStartCell","drawWalls","sizing","width","window","innerWidth","reSizing","componentDidUpdate","onload","this","addEventListener","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.63868a29.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/interactions.css\";\r\n\r\nconst Interactions = (props) => {\r\n  return <section className=\"interactions\">{props.children}</section>;\r\n};\r\n\r\nexport default Interactions;\r\n","import React from \"react\";\r\nimport \"../styles/algorithmsButtons.css\";\r\n\r\nconst AlgorithmsButtons = (props) => {\r\n  return <section className=\"algorithmsButtons\">{props.children}</section>;\r\n};\r\n\r\nexport default AlgorithmsButtons;\r\n","import React from \"react\";\r\nimport \"../styles/menu.css\";\r\n\r\nconst Menu = (props) => {\r\n  return <section className=\"menu\">{props.children}</section>;\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport \"../styles/clickable.css\";\r\n\r\nconst Clickable = (props) => {\r\n  return <section className=\"clickable\">{props.children}</section>;\r\n};\r\n\r\nexport default Clickable;\r\n","import React from \"react\";\r\nimport \"./styles/cell.css\";\r\n\r\nconst Cell = (props) => {\r\n  const {\r\n    col,\r\n    row,\r\n    isFinish,\r\n    isStart,\r\n    isWall,\r\n    isPath,\r\n    isVisited,\r\n    clickHandler,\r\n  } = props;\r\n\r\n  let cName = \"cell\";\r\n\r\n  if (isVisited) cName = \"cell visited\";\r\n  if (isPath) cName = \"cell path\";\r\n  if (isFinish) cName = \"cell finish\";\r\n  if (isStart) cName = \"cell start\";\r\n  if (isWall) cName = \"cell wall\";\r\n\r\n  return (\r\n    <div onClick={clickHandler} className={cName} id={`${row}-${col}`}>\r\n      {isStart ? <i className=\"far fa-play-circle\"></i> : null}\r\n      {isFinish ? <i className=\"far fa-times-circle\"></i> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst Grid = (props) => {\r\n  const { mouseEvents, options } = props;\r\n  return (\r\n    <section\r\n      className=\"grid\"\r\n      id=\"grid\"\r\n      onMouseDown={options.isDrawingWalls ? mouseEvents.mouseDown : null}\r\n      onMouseUp={options.isDrawingWalls ? mouseEvents.mouseUp : null}\r\n      onMouseMove={\r\n        options.isDrawingWalls && options.isMouseClicked\r\n          ? mouseEvents.mouseDrag\r\n          : null\r\n      }\r\n    >\r\n      {props.grid.map((row, rowId) => {\r\n        return (\r\n          <div key={rowId} className=\"row\">\r\n            {row.map((cell, cellId) => {\r\n              const {\r\n                row,\r\n                col,\r\n                isStart,\r\n                isFinish,\r\n                isWall,\r\n                isVisited,\r\n                isPath,\r\n              } = cell;\r\n              return (\r\n                <Cell\r\n                  key={cellId}\r\n                  row={row}\r\n                  col={col}\r\n                  isStart={isStart}\r\n                  isFinish={isFinish}\r\n                  isWall={isWall}\r\n                  isVisited={isVisited}\r\n                  isPath={isPath}\r\n                  clickHandler={\r\n                    options.isChangingStart\r\n                      ? mouseEvents.changeStart\r\n                      : options.isChangingEnd\r\n                      ? mouseEvents.changeEnd\r\n                      : null\r\n                  }\r\n                ></Cell>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport \"./styles/legend.css\";\r\n\r\nexport default class Legend extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <section className=\"legend\">\r\n          <div className=\"legendCell pathLegend\">\r\n            <strong>Path</strong>\r\n          </div>\r\n          <div className=\"legendCell wallLegend\">\r\n            <strong>Wall</strong>\r\n          </div>\r\n          <div className=\"legendCell currentlyLegend\">\r\n            <strong>Current</strong>\r\n          </div>\r\n\r\n          <div className=\"legendCell visitedLegend\">\r\n            <strong>Visited</strong>\r\n          </div>\r\n\r\n          <div className=\"legendCell startLegend\">\r\n            <strong>Start</strong>\r\n          </div>\r\n\r\n          <div className=\"legendCell finishLegend\">\r\n            <strong>Finish</strong>\r\n          </div>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./styles/footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"socials\">\r\n        <a href=\"https://github.com/fizo99\">\r\n          <i className=\"fab fa-github-square\"></i>\r\n        </a>\r\n        <a href=\"https://www.linkedin.com/in/krzysztof-huczek-a1bb36175/\">\r\n          <i className=\"fab fa-linkedin\"></i>\r\n        </a>\r\n        <a href=\"https://www.facebook.com/mvpett\">\r\n          <i className=\"fab fa-facebook-square\"></i>\r\n        </a>\r\n      </div>\r\n      <small>© Krzysztof Huczek, 2020</small>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./styles/button.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button onClick={props.handleClick} className={props.className}>\r\n      <strong>{props.text}</strong>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nconst SelectField = (props) => {\r\n  return (\r\n    <select\r\n      id={props.id}\r\n      onChange={props.handleAnimationSpeed}\r\n      defaultValue={props.defaultValue}\r\n    >\r\n      <option hidden disabled value={props.defaultValue}>\r\n        {props.defaultValue}\r\n      </option>\r\n      {props.options.map((option, optionID) => {\r\n        return (\r\n          <option key={optionID} value={option}>\r\n            {option}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectField;\r\n","export const dijkstra = (grid, startCell, finishCell) => {\r\n  //console.log(startCell);\r\n  const visitedCellsInOrder = [];\r\n  startCell.distance = 0;\r\n  const unVisitedCells = getCells(grid);\r\n  while (unVisitedCells.length) {\r\n    unVisitedCells.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance); // min heap better option\r\n    const closestCell = unVisitedCells.shift();\r\n    if (closestCell.distance === Infinity) return visitedCellsInOrder;\r\n    closestCell.isVisited = true;\r\n    visitedCellsInOrder.push(closestCell);\r\n    if (closestCell === finishCell) return visitedCellsInOrder;\r\n    updateUnvisitedNeighbors(closestCell, grid);\r\n  }\r\n};\r\n\r\nconst updateUnvisitedNeighbors = (cell, grid) => {\r\n  const unvisitedNeighbors = getNeighbors(cell, grid).filter(\r\n    (neighbor) => !neighbor.isVisited\r\n  );\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = cell.distance + 1;\r\n    neighbor.previousCell = cell;\r\n  }\r\n};\r\n\r\nconst getNeighbors = (cell, grid) => {\r\n  const numCol = grid[0].length;\r\n  const numRow = grid.length;\r\n  const neighbors = [];\r\n  const { col, row } = cell;\r\n\r\n  if (col - 1 >= 0) neighbors.push(grid[row][col - 1]); //left\r\n  if (col + 1 < numCol) neighbors.push(grid[row][col + 1]); //right\r\n  if (row + 1 < numRow) neighbors.push(grid[row + 1][col]); //top\r\n  if (row - 1 >= 0) neighbors.push(grid[row - 1][col]); //bottom\r\n\r\n  return neighbors;\r\n};\r\n\r\nconst getCells = (grid) => {\r\n  const listOfCells = [];\r\n  const numCol = grid[0].length;\r\n  const numRow = grid.length;\r\n\r\n  for (let i = 0; i < numRow; i++) {\r\n    for (let j = 0; j < numCol; j++) {\r\n      if (grid[i][j].isWall) continue;\r\n      listOfCells.push(grid[i][j]);\r\n    }\r\n  }\r\n  return listOfCells;\r\n};\r\n","export const astar = (grid, startCell, finishCell) => {\r\n  const openSet = [];\r\n  const closedSet = [];\r\n  openSet.push(grid[startCell.row][startCell.col]);\r\n  const visitedInOrder = [];\r\n\r\n  while (openSet.length > 0) {\r\n    let lowestIndex = 0;\r\n    for (let i = 0; i < openSet.length; i++) {\r\n      if (openSet[i].f < openSet[lowestIndex].f) {\r\n        lowestIndex = i;\r\n      }\r\n    }\r\n\r\n    if (openSet[lowestIndex] === finishCell) {\r\n      //return path(finishCell);\r\n      return visitedInOrder;\r\n    }\r\n\r\n    const current = openSet[lowestIndex];\r\n    visitedInOrder.push(current);\r\n\r\n    removeFromArray(openSet, current); //spllice(lowestIndex,1) ??\r\n    closedSet.push(current);\r\n    //grid[current.row][current.col].isVisited = true;\r\n\r\n    const neighbors = getNeighbors(current, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      let neighbor = neighbors[i];\r\n      if (neighbor.isWall) {\r\n        closedSet.push(neighbor);\r\n        continue;\r\n      }\r\n      visitedInOrder.push(neighbor);\r\n      if (!closedSet.includes(neighbor)) {\r\n        //grid[neighbor.row][neighbor.col].g = grid[current.row][current.col].g + 1\r\n        let tempG = grid[current.row][current.col].g + 1;\r\n        if (openSet.includes(neighbor)) {\r\n          if (tempG < neighbor.g) {\r\n            neighbor.g = tempG;\r\n          }\r\n        } else {\r\n          neighbor.g = tempG;\r\n          openSet.push(neighbor);\r\n        }\r\n\r\n        neighbor.h = heuristic(neighbor, finishCell);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.previousCell = current;\r\n      }\r\n    }\r\n  }\r\n  return visitedInOrder;\r\n  //return grid;\r\n  // const path = [];\r\n  // let end = finishCell\r\n  // while(end.previousCell !== startCell){\r\n  //     path.push(end)\r\n  //     end = end.previousCell\r\n  // }\r\n  // return path;\r\n};\r\n\r\n// const path = (endCell) => {\r\n//     const path = [];\r\n//     while(endCell.previousCell != null){\r\n//         path.push(endCell)\r\n//         endCell = endCell.previousCell;\r\n//     }\r\n//     return path;\r\n// }\r\n\r\nconst heuristic = (a, b) => {\r\n  if (a.row === b.row) return Math.abs(a.col - b.col);\r\n  if (a.col === b.col) return Math.abs(a.row - b.row);\r\n  return Math.abs(a.row - b.row) + Math.abs(a.col - b.col);\r\n  //pythagoras a^2 + b^2 = c^2\r\n  //return Math.sqrt(Math.abs(a.col-b.col)+Math.abs(a.row-b.row))\r\n};\r\n\r\nconst removeFromArray = (arr, element) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    if (arr[i] === element) {\r\n      arr.splice(i, 1);\r\n    }\r\n  }\r\n};\r\n\r\nconst getNeighbors = (cell, grid) => {\r\n  const numCol = grid[0].length;\r\n  const numRow = grid.length;\r\n  const neighbors = [];\r\n  const { col, row } = cell;\r\n\r\n  if (col - 1 >= 0) neighbors.push(grid[row][col - 1]); //left\r\n  if (col + 1 < numCol) neighbors.push(grid[row][col + 1]); //right\r\n  if (row + 1 < numRow) neighbors.push(grid[row + 1][col]); //top\r\n  if (row - 1 >= 0) neighbors.push(grid[row - 1][col]); //bottom\r\n\r\n  return neighbors;\r\n};\r\n","// http://www.migapro.com/depth-first-search/\r\n\r\nexport default function DFSmaze(\r\n  startCellCoords,\r\n  endCellCoords,\r\n  numRow,\r\n  numCol,\r\n  grid\r\n) {\r\n  for (let i = 0; i < numRow; i++) {\r\n    for (let j = 0; j < numCol; j++) {\r\n      if (\r\n        (i === startCellCoords.row && j === startCellCoords.col) ||\r\n        (i === endCellCoords.row && j === endCellCoords.col)\r\n      )\r\n        continue;\r\n      grid[i][j].isWall = true;\r\n      grid[i][j].isVisited = false;\r\n      grid[i][j].isPath = false;\r\n    }\r\n  }\r\n\r\n  let c = randomInt(0, numCol - 1);\r\n  while (c % 2 === 0) c = randomInt(0, numCol - 1);\r\n\r\n  let r = randomInt(0, numRow - 1);\r\n  while (r % 2 === 0) r = randomInt(0, numRow - 1);\r\n\r\n  const order = [];\r\n  grid[r][c].isWall = false;\r\n  order.push(grid[r][c]);\r\n\r\n  recursion(r, c, grid, order, numRow, numCol);\r\n  return order;\r\n}\r\n\r\nconst recursion = (r, c, grid, order, numRow, numCol) => {\r\n  const randDirs = generateRandomDirections();\r\n  // Examine each direction\r\n  for (let i = 0; i < randDirs.length; i++) {\r\n    // eslint-disable-next-line default-case\r\n    switch (randDirs[i]) {\r\n      case 1: // Up\r\n        //　Whether 2 cells up is out or not\r\n        if (r - 2 <= 0) continue;\r\n        if (grid[r - 2][c].isWall) {\r\n          grid[r - 2][c].isWall = false;\r\n          grid[r - 1][c].isWall = false;\r\n          order.push(grid[r - 2][c]);\r\n          order.push(grid[r - 1][c]);\r\n          recursion(r - 2, c, grid, order, numRow, numCol);\r\n        }\r\n        break;\r\n      case 2: // Right\r\n        // Whether 2 cells to the right is out or not\r\n        if (c + 2 >= numCol - 1) continue;\r\n        if (grid[r][c + 2].isWall) {\r\n          grid[r][c + 2].isWall = false;\r\n          grid[r][c + 1].isWall = false;\r\n          order.push(grid[r][c + 2]);\r\n          order.push(grid[r][c + 1]);\r\n          recursion(r, c + 2, grid, order, numRow, numCol);\r\n        }\r\n        break;\r\n      case 3: // Down\r\n        // Whether 2 cells down is out or not\r\n        if (r + 2 >= numRow - 1) continue;\r\n        if (grid[r + 2][c].isWall) {\r\n          grid[r + 2][c].isWall = false;\r\n          grid[r + 1][c].isWall = false;\r\n          order.push(grid[r + 2][c]);\r\n          order.push(grid[r + 1][c]);\r\n          recursion(r + 2, c, grid, order, numRow, numCol);\r\n        }\r\n        break;\r\n      case 4: // Left\r\n        // Whether 2 cells to the left is out or not\r\n        if (c - 2 <= 0) continue;\r\n        if (grid[r][c - 2].isWall) {\r\n          grid[r][c - 2].isWall = false;\r\n          grid[r][c - 1].isWall = false;\r\n          order.push(grid[r][c - 2]);\r\n          order.push(grid[r][c - 1]);\r\n          recursion(r, c - 2, grid, order, numRow, numCol);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n};\r\n\r\nconst generateRandomDirections = () => {\r\n  const dirs = [];\r\n  for (let i = 0; i < 4; i++) dirs.push(i + 1);\r\n  return shuffle(dirs);\r\n};\r\n\r\nconst shuffle = (a) => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n};\r\n\r\nfunction randomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./components/styles/mobile/media-queries.css\";\r\n\r\nimport { delay } from \"./utils\";\r\n\r\n//wrappers\r\nimport Interactions from \"./components/wrappers/Interactions\";\r\nimport AlgorithmsButtons from \"./components/wrappers/AlgorithmsButtons\";\r\nimport Menu from \"./components/wrappers/Menu\";\r\nimport Clickable from \"./components/wrappers/Clickable\";\r\n//components\r\nimport Grid from \"./components/Grid\";\r\nimport Legend from \"./components/Legend\";\r\nimport Footer from \"./components/Footer\";\r\nimport Button from \"./components/Button\";\r\nimport SelectField from \"./components/SelectField\";\r\n//algorithms\r\nimport { dijkstra } from \"./algorithms/dijkstra\";\r\nimport { astar } from \"./algorithms/astar\";\r\nimport DFSmaze from \"./algorithms/DFSmaze\";\r\n\r\n//number of rows and columns of start grid\r\nlet numRow = 25;\r\nlet numCol = 51;\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      startCellCoords: {\r\n        row: 12,\r\n        col: 8,\r\n      },\r\n      endCellCoords: {\r\n        row: 12,\r\n        col: 14,\r\n      },\r\n      isDrawingWalls: false,\r\n      isMouseClicked: false,\r\n      isChangingStart: false,\r\n      isChangingEnd: false,\r\n      animationSpeed: 3,\r\n      isAnimationInProccess: false,\r\n    };\r\n    this.tempGrid = null;\r\n  }\r\n\r\n  makeCell = (row, col) => {\r\n    const { startCellCoords, endCellCoords } = this.state;\r\n    return {\r\n      row: row,\r\n      col: col,\r\n      isStart: row === startCellCoords.row && col === startCellCoords.col,\r\n      isFinish: row === endCellCoords.row && col === endCellCoords.col,\r\n      isWall: false,\r\n      previousCell: null,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isPath: false,\r\n      f: 0,\r\n      g: 0,\r\n      h: 0,\r\n    };\r\n  };\r\n  makeGrid = () => {\r\n    const grid = [];\r\n    if (numCol % 2 === 0) numCol++;\r\n    for (let i = 0; i < numRow; i++) {\r\n      const curCol = [];\r\n      for (let j = 0; j < numCol; j++) {\r\n        curCol.push(this.makeCell(i, j));\r\n      }\r\n      grid.push(curCol);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  resetGrid = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    this.setState({\r\n      grid: this.makeGrid(),\r\n      isDrawingWalls: false,\r\n      isMouseClicked: false,\r\n      isChangingStart: false,\r\n      isChangingEnd: false,\r\n    });\r\n  };\r\n\r\n  genMaze = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n\r\n    const { startCellCoords, endCellCoords } = this.state;\r\n    const grid = this.makeGrid();\r\n\r\n    DFSmaze(startCellCoords, endCellCoords, numRow, numCol, grid);\r\n    this.setState({ grid: grid });\r\n  };\r\n\r\n  solve = (algorithm) => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const { grid, startCellCoords, endCellCoords } = this.state;\r\n    for (let i = 0; i < numCol; i++) {\r\n      for (let j = 0; j < numRow; j++) {\r\n        grid[j][i].isVisited = false;\r\n        grid[j][i].distance = Infinity;\r\n        grid[j][i].previousCell = null;\r\n        grid[j][i].f = 0;\r\n        grid[j][i].g = 0;\r\n        grid[j][i].h = 0;\r\n        grid[j][i].isPath = false;\r\n      }\r\n    }\r\n    this.setState(\r\n      {\r\n        grid: grid,\r\n        isAnimationInProccess: true,\r\n      },\r\n      () => {\r\n        const startCell = grid[startCellCoords.row][startCellCoords.col];\r\n        const endCell = grid[endCellCoords.row][endCellCoords.col];\r\n\r\n        const visitedCellsInOrder = algorithm(grid, startCell, endCell);\r\n        this.animateVisited(visitedCellsInOrder).then((data) => {\r\n          const grid = data[0];\r\n          delay(data[1]).then(() => {\r\n            const newGrid = this.animatePath(grid);\r\n            this.setState({ grid: newGrid, isAnimationInProccess: false });\r\n          });\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  //ANIMATIONS\r\n  animateVisited = (visitedCellsInOrder) => {\r\n    const { grid, endCellCoords, startCellCoords, animationSpeed } = this.state;\r\n    return new Promise(function (resolve, reject) {\r\n      for (let i = 1; i < visitedCellsInOrder.length; i++) {\r\n        const row = visitedCellsInOrder[i].row;\r\n        const col = visitedCellsInOrder[i].col;\r\n        if (\r\n          (row === startCellCoords.row && col === startCellCoords.col) ||\r\n          (row === endCellCoords.row && col === endCellCoords.col)\r\n        )\r\n          continue;\r\n        setTimeout(() => {\r\n          grid[row][col].isVisited = true;\r\n          document.getElementById(`${row}-${col}`).className = \"cell visited\";\r\n        }, i * animationSpeed);\r\n      }\r\n      resolve([grid, visitedCellsInOrder.length * animationSpeed]); // immediately give the result: 123\r\n    });\r\n  };\r\n  animatePath = (grid) => {\r\n    const { endCellCoords, startCellCoords, animationSpeed } = this.state;\r\n    const lastCell = grid[endCellCoords.row][endCellCoords.col];\r\n    let temp = lastCell;\r\n\r\n    //shortest path\r\n    const path = [];\r\n    while (temp !== null) {\r\n      path.push(temp);\r\n      temp = temp.previousCell;\r\n    }\r\n\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n      let row = path[i].row;\r\n      let col = path[i].col;\r\n      if (\r\n        (row === startCellCoords.row && col === startCellCoords.col) ||\r\n        (row === endCellCoords.row && col === endCellCoords.col)\r\n      )\r\n        continue;\r\n      setTimeout(() => {\r\n        grid[row][col].isPath = true;\r\n        document.getElementById(`${row}-${col}`).className = \"cell path\";\r\n      }, i * animationSpeed);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  // INTERACTIONS HANDLERS\r\n  animationSpeedHandler = (e) => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const value = e.target.value;\r\n    if (value === \"Fast\") this.setState({ animationSpeed: 3 });\r\n    else if (value === \"Average\") this.setState({ animationSpeed: 12 });\r\n    else if (value === \"Slow\") this.setState({ animationSpeed: 25 });\r\n  };\r\n  changeStartBtnHandler = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    this.setState({\r\n      isChangingStart: true,\r\n      isChangingEnd: false,\r\n      isDrawingWalls: false,\r\n    });\r\n  };\r\n  changeEndBtnHandler = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    this.setState({\r\n      isChangingEnd: true,\r\n      isChangingStart: false,\r\n      isDrawingWalls: false,\r\n    });\r\n  };\r\n  drawingWallsBtnHandler = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    this.setState({\r\n      isChangingEnd: false,\r\n      isChangingStart: false,\r\n      isDrawingWalls: true,\r\n    });\r\n  };\r\n  mouseDownHandler = () => {\r\n    this.tempGrid = this.state.grid;\r\n    this.setState({\r\n      isMouseClicked: true,\r\n    });\r\n  };\r\n  mouseUpHandler = () => {\r\n    this.setState({\r\n      isMouseClicked: false,\r\n      grid: this.tempGrid,\r\n    });\r\n  };\r\n\r\n  changeEndCell = (e) => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const cellCoords = e.target.id.split(\"-\");\r\n    if (cellCoords.length < 2) return;\r\n\r\n    const { endCellCoords, grid } = this.state;\r\n\r\n    grid[endCellCoords.row][endCellCoords.col].isFinish = false;\r\n    const row = parseInt(cellCoords[0]);\r\n    const col = parseInt(cellCoords[1]);\r\n    grid[row][col].isWall = false;\r\n    grid[row][col].isFinish = true;\r\n    this.setState({\r\n      grid: grid,\r\n      endCellCoords: {\r\n        row: row,\r\n        col: col,\r\n      },\r\n    });\r\n  };\r\n  changeStartCell = (e) => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const cellCoords = e.target.id.split(\"-\");\r\n    if (cellCoords.length < 2) return;\r\n\r\n    const { startCellCoords, grid } = this.state;\r\n    const row = parseInt(cellCoords[0]);\r\n    const col = parseInt(cellCoords[1]);\r\n    grid[startCellCoords.row][startCellCoords.col].isStart = false;\r\n    grid[row][col].isWall = false;\r\n    grid[row][col].isStart = true;\r\n    this.setState({\r\n      grid: grid,\r\n      startCellCoords: {\r\n        row: row,\r\n        col: col,\r\n      },\r\n    });\r\n  };\r\n\r\n  drawWalls = (e) => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const { startCellCoords, endCellCoords } = this.state;\r\n    const cellCoords = e.target.id.split(\"-\");\r\n    if (cellCoords.length < 2) return;\r\n    if (\r\n      (parseInt(cellCoords[0]) === startCellCoords.row &&\r\n        parseInt(cellCoords[1]) === startCellCoords.col) ||\r\n      (parseInt(cellCoords[0]) === endCellCoords.row &&\r\n        parseInt(cellCoords[1]) === endCellCoords.col)\r\n    )\r\n      return;\r\n    document.getElementById(\r\n      \"\" + cellCoords[0] + \"-\" + cellCoords[1]\r\n    ).className = \"cell wall\";\r\n    this.tempGrid[cellCoords[0]][cellCoords[1]].isWall = true;\r\n  };\r\n  //window sizing/resizing for responsive grid\r\n  sizing = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const width = window.innerWidth;\r\n\r\n    if (width <= 576) numCol = 15;\r\n    else if (width > 576 && width <= 1024) numCol = 25;\r\n    else if (width > 1024 && width < 1200) numCol = 30;\r\n    else numCol = 50;\r\n\r\n    this.setState(\r\n      {\r\n        startCellCoords: { row: 12, col: Math.ceil(numCol / 3) },\r\n        endCellCoords: { row: 12, col: Math.ceil(numCol / 3) * 2 },\r\n      },\r\n      () => {\r\n        const grid = this.makeGrid();\r\n        this.setState({\r\n          grid: grid,\r\n        });\r\n      }\r\n    );\r\n  };\r\n  reSizing = () => {\r\n    if (this.state.isAnimationInProccess) return;\r\n    const width = window.innerWidth;\r\n\r\n    if (width <= 576) numCol = 15;\r\n    else if (width > 576 && width <= 1024) numCol = 25;\r\n    else if (width > 1024 && width < 1200) numCol = 30;\r\n    else numCol = 50;\r\n\r\n    this.setState(\r\n      {\r\n        startCellCoords: {\r\n          row: 12,\r\n          col: Math.ceil(numCol / 3),\r\n        },\r\n        endCellCoords: {\r\n          row: 12,\r\n          col: Math.ceil(numCol / 3) * 2,\r\n        },\r\n      },\r\n      () => {\r\n        const grid = this.makeGrid();\r\n        this.setState({\r\n          grid: grid,\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.onload = this.sizing;\r\n    window.addEventListener(\"resize\", this.reSizing);\r\n  }\r\n\r\n  componentDidUpdate = () => {};\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      isDrawingWalls,\r\n      isChangingEnd,\r\n      isChangingStart,\r\n      isMouseClicked,\r\n    } = this.state;\r\n    return (\r\n      <main>\r\n        <Menu>\r\n          <Legend />\r\n          <Clickable>\r\n            <AlgorithmsButtons>\r\n              <Button\r\n                text={\"Dijkstra\"}\r\n                handleClick={() => this.solve(dijkstra)}\r\n              />\r\n              <Button text={\"A*\"} handleClick={() => this.solve(astar)} />\r\n              <Button\r\n                text={\"Generate Maze\"}\r\n                handleClick={() => this.genMaze()}\r\n              />\r\n            </AlgorithmsButtons>\r\n            <Interactions>\r\n              <SelectField\r\n                id={\"animationSpeed\"}\r\n                options={[\"Fast\", \"Average\", \"Slow\"]}\r\n                defaultValue={\"Speed\"}\r\n                handleAnimationSpeed={this.animationSpeedHandler}\r\n              />\r\n              <Button\r\n                className=\"btn-reset\"\r\n                text={\"Reset\"}\r\n                handleClick={this.resetGrid}\r\n              />\r\n              <Button\r\n                className=\"btn-wall\"\r\n                text={\"Add walls\"}\r\n                handleClick={this.drawingWallsBtnHandler}\r\n              />\r\n              <Button\r\n                className=\"btn-start\"\r\n                text={\"Change Start\"}\r\n                handleClick={this.changeStartBtnHandler}\r\n              />\r\n              <Button\r\n                className=\"btn-finish\"\r\n                text={\"Change End\"}\r\n                handleClick={this.changeEndBtnHandler}\r\n              />\r\n            </Interactions>\r\n          </Clickable>\r\n        </Menu>\r\n        <Grid\r\n          options={{\r\n            isDrawingWalls: isDrawingWalls,\r\n            isMouseClicked: isMouseClicked,\r\n            isChangingStart: isChangingStart,\r\n            isChangingEnd: isChangingEnd,\r\n          }}\r\n          mouseEvents={{\r\n            changeStart: this.changeStartCell,\r\n            changeEnd: this.changeEndCell,\r\n            mouseDown: this.mouseDownHandler,\r\n            mouseUp: this.mouseUpHandler,\r\n            mouseDrag: this.drawWalls,\r\n          }}\r\n          grid={grid}\r\n        />\r\n        <Footer />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*  bin\r\nanimateMaze = (walls) => {\r\n    const { grid, endCellCoords, startCellCoords, animationSpeed } = this.state;\r\n    return new Promise(function (resolve, reject) {\r\n      for (let i = 0; i < walls.length; i++) {\r\n        const row = walls[i].row;\r\n        const col = walls[i].col;\r\n        if (\r\n          (row === startCellCoords.row && col === startCellCoords.col) ||\r\n          (row === endCellCoords.row && col === endCellCoords.col)\r\n        )\r\n          continue;\r\n        setTimeout(() => {\r\n          grid[row][col].isWall = true;\r\n          document.getElementById(`${row}-${col}`).className = \"cell wall\";\r\n        }, i * animationSpeed);\r\n      }\r\n      resolve(walls.length * animationSpeed); // immediately give the result: 123\r\n    });\r\n  };\r\n\r\n*/\r\n","export const delay = (ms) => {\r\n  return new Promise((res) => setTimeout(res, ms));\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./visualiser/App\";\n// import \"./visualiser/components/styles/visualiser.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}